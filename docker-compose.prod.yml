version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-ayatest}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nats:
    image: nats:2.9-alpine
    command: "--jetstream"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal:
    image: temporalio/auto-setup:1.20.0
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PWD=${DB_PASSWORD:-postgres}
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/production.yaml
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./configs/temporal:/etc/temporal/config/dynamicconfig
    restart: always

  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-ayatest}
      - NATS_URL=nats://nats:4222
      - TEMPORAL_URL=temporal:7233
      - PORT=8080
      - JWT_SECRET=${JWT_SECRET:-default_jwt_secret_change_in_production}
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      temporal:
        condition: service_started
    restart: always

  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      args:
        - VITE_API_URL=/query
    volumes:
      - frontend_build:/app/dist
    restart: always

  nginx:
    image: nginx:1.23-alpine
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_build:/usr/share/nginx/html:ro
      - media_data:/usr/share/nginx/html/media
    depends_on:
      - backend
      - frontend
    restart: always

  caddy:
    image: caddy:2.6-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - nginx
    restart: always

  seed:
    build:
      context: .
      dockerfile: docker/seed.Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-ayatest}
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    restart: "no"

volumes:
  postgres_data:
  frontend_build:
  media_data:
  caddy_data:
  caddy_config: